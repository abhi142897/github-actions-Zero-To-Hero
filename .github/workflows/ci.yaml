name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Build with Maven
        working-directory: spring-boot-app
        run: mvn clean package
        
      - name: Upload JAR as an Artifact
        working-directory: spring-boot-app
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-web
          path: target/*.jar
#  sonar:
#    needs: build
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Run SonarQube Analysis
#        working-directory: spring-boot-app
#        run: |
#          mvn sonar:sonar \
#            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
#            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Change working directory
        run: cd spring-boot-app
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download JAR Artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-web
          path: target
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Check if JAR file exists
        run: ls -l
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="${{ vars.DOCKER_USER }}/github-actions-demo"
          VERSION="${{ github.run_number }}"
          docker build -t $IMAGE_NAME:$VERSION .
          docker push $IMAGE_NAME:$VERSION